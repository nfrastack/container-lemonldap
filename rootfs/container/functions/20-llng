# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

llng_bootstrap_filesystem(){
    create_folder \
                   "${CONFIG_PATH},\
                   ${DATA_PATH},\
                   ${DATA_PATH}/cache \
                   ${DATA_PATH}/conf \
                   ${DATA_PATH}/psessions/lock \
                   ${DATA_PATH}/sessions/lock \
                   ${LOG_PATH}" \
                   "${NGINX_USER}:"${NGINX_GROUP} 755

    if [ "${CONFIG_PATH}" != "/etc/lemonldap-ng" ] && [ "${CONFIG_PATH}" != "/etc/lemonldap-ng/" ] && [ ! -L "/etc/lemonldap-ng" ] && [ ! -d "/etc/lemonldap-ng" ] ; then
        ln -sf "${CONFIG_PATH}" /etc/lemonldap-ng
    fi

    if [ "${DATA_PATH}" != "/var/lib/lemonldap-ng" ] && [ "${DATA_PATH}" != "/var/lib/lemonldap-ng/" ] && [ ! -L "/var/lib/lemonldap-ng" ] && [ ! -d "/var/lib/lemonldap-ng" ] ; then
        ln -sf "${DATA_PATH}" /var/lib/lemonldap-ng
    fi
}

llng_bootstrap_configuration() {
  if [ ! "$(ls -A "${DATA_PATH}"/conf/)" ]; then
    cp -R /container/data/llng/llng/conf/lmConf-1.json "${DATA_PATH}"/conf/
    print_debug "Bootstrapping Initial Configuration"

    ### Modify File Configuration
    sed -i \
                -e "s|auth.example.com|${PORTAL_HOSTNAME}|g" \
                -e "s|manager.example.com|${MANAGER_HOSTNAME}|g" \
                -e "s|reload.example.com|${HANDLER_HOSTNAME}|g" \
                -e "s|test1.example.com|${TEST_HOSTNAME}|g" \
                -e "s|example.com|${DOMAIN_NAME}|g" \
            /var/lib/lemonldap-ng/conf/lmConf-1.json
  fi
}

llng_configure_configuration() {
    case "${CONFIG_TYPE,,}" in
        "file" )
            config_configuration=$(cat<<EOF
type = File
dirName = /var/lib/lemonldap-ng/conf
localStorage=Cache::FileCache
localStorageOptions={'namespace' => '${CACHE_TYPE_FILE_NAMESPACE}','default_expires_in' => '${CACHE_TYPE_FILE_EXPIRY}', 'directory_umask' => '${CACHE_TYPE_FILE_DIR_MASK}', 'cache_root' => '${CACHE_TYPE_FILE_PATH}', 'cache_depth' => '${CACHE_TYPE_FILE_DEPTH}', }
EOF
                        )
            echo "0 */12 * * * /usr/share/lemonldap-ng/bin/purgeCentralCache > /dev/null 2>&1" | silent tee /container/cron/lemonldap-purgecentralcache
            echo "5 5 * * 6 ${NGINX_USER} /usr/share/lemonldap-ng/bin/rotateOidcKeys > /dev/null 2>&1" | silent tee /container/cron/lemonldap-rotateoidckeys
        ;;
        "rest" )
            transform_var file \
                                REST_HOST \
                                REST_PASS \
                                REST_USER


            config_configuration=$(cat<<EOF
type = REST
baseUrl = ${REST_HOST}
User = ${REST_USER}
Password = ${REST_PASS}
EOF
                        )
            echo "1 * * * * /usr/share/lemonldap-ng/bin/purgeLocalCache  > /dev/null 2>&1" silent tee /container/cron/lemonldap-purgelocalcache
        ;;
    esac
}

llng_configure_fail2ban_llng() {
    source /container/base/*/07-firewall
    mkdir -p "${NGINX_LOG_ERROR_LOCATION}"
    touch "${NGINX_LOG_ERROR_LOCATION}"/error-handler.log
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_LOG_ERROR_LOCATION}"
    cat <<EOF | silent tee "${FAIL2BAN_CONFIG_PATH}"/jail.d/llng.conf
[llng]
enabled  = true
backend  = auto
port     = http,https
filter   = lemonldap
action   = iptables-multiport[name=llng, port="http,https"]
logpath  = ${NGINX_LOG_ERROR_LOCATION}/error*.log
maxretry = 3
EOF
}

llng_configure_api() {
    if var_true "${ENABLE_API}" ; then
        print_debug "Configuring Manager API"
        nginx_site_enable api
        update_template /etc/nginx/sites.available/api.conf \
                                                            API_HOSTNAME \
                                                            NGINX_LISTEN_PORT \
                                                            NGINX_LOG_ACCESS_FORMAT \
                                                            NGINX_LOG_ACCESS_LOCATION \
                                                            NGINX_LOG_ERROR_LOCATION

        create_logrotate nginx_lemonldap-manager_api "${NGINX_LOG_ACCESS_LOCATION}"/access-api.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-manager_api "${NGINX_LOG_ACCESS_LOCATION}"/error-api.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"

        api_allowed=$(echo "${MANAGER_API_ALLOWED_IPS}" | tr "," "\n" | uniq)
        for allowed_host in ${api_allowed}; do
            print_debug "API - Allowing ${allowed_host} to access"
            sed -i "/allow 127.0.0.1/a\ \ \          allow ${allowed_host};" /etc/nginx/sites.available/api.conf
        done
    fi
}


llng_configure_handler() {
    if var_true "${ENABLE_HANDLER}" ; then
        print_debug "Configuring Handler"
        nginx_site_enable handler
        update_template /etc/nginx/sites.available/handler.conf \
                                                            HANDLER_HOSTNAME \
                                                            NGINX_LISTEN_PORT \
                                                            NGINX_LOG_ACCESS_FORMAT \
                                                            NGINX_LOG_ACCESS_LOCATION \
                                                            NGINX_LOG_ERROR_LOCATION

        create_logrotate nginx_lemonldap-handler_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-handler.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-handler_error "${NGINX_LOG_ACCESS_LOCATION}"/error-handler.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"

        if [ "${CONFIG_TYPE,,}" = "rest" ] ; then
            sed -i "s|lmremote_user|remote_user|g" /etc/nginx/nginx.conf
        fi

        handler_allowed=$(echo "${HANDLER_ALLOWED_IPS}" | tr "," "\n" | uniq)
        for allowed_host in $handler_allowed; do
            sed -i "/allow 127.0.0.1/a\ \ \         allow ${allowed_host};" /etc/nginx/sites.available/handler.conf
        done

        ### Add Entry to hosts
        echo "127.0.0.1 ${HANDLER_HOSTNAME}" >> /etc/hosts
        config_handler=$(cat<<EOF
[handler]
EOF
                        )

        if [ -n "${HANDLER_LOG_TYPE}" ] ; then
            config_handler=$(cat<<EOF
${config_handler}
logger = $(llng_logtype "$HANDLER_LOG_TYPE")
EOF
                            )
        fi

        if [ -n "${HANDLER_USER_LOG_TYPE}" ] ; then
            config_handler=$(cat<<EOF
${config_handler}
userLogger = $(llng_logtype "$HANDLER_LOG_TYPE")
EOF
                            )
        fi

        if var_true "${HANDLER_REDIRECT_ON_ERROR}" ;  then
            config_handler=$(cat<<EOF
${config_handler}
useRedirectOnError = 1
EOF
                            )
        fi

        if var_true "${HANDLER_STATUS}" ;  then
            config_handler=$(cat<<EOF
${config_handler}
status = 1
EOF
                            )
        fi
    else
        service_stop 20-llng
    fi
}

llng_configure_logging() {
    print_debug "Configuring Logging"
    config_logging=$(cat<<EOF
logger = $(llng_logtype "${LOG_TYPE}")
userLogger = $(llng_logtype "${LOG_TYPE}")
logLevel = ${LOG_LEVEL}
EOF
                )
}

llng_configure_manager() {
    if var_true "${ENABLE_MANAGER}" ; then
        print_debug "Configuring Manager"
        nginx_site_enable manager
        update_template /etc/nginx/sites.available/manager.conf \
                                                            MANAGER_HOSTNAME \
                                                            NGINX_LISTEN_PORT \
                                                            NGINX_LOG_ACCESS_FORMAT \
                                                            NGINX_LOG_ACCESS_LOCATION \
                                                            NGINX_LOG_ERROR_LOCATION

        create_logrotate nginx_lemonldap-manager_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-manager.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-manager_error "${NGINX_LOG_ACCESS_LOCATION}"/error-manager.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"

        config_manager=$(cat<<EOF
[manager]
protection = ${MANAGER_PROTECTION}
languages = ${MANAGER_LANGUAGE}
enabledModules = ${MANAGER_ENABLED_MODULES}
staticPrefix = ${MANAGER_STATIC_PREFIX}
templateDir = ${MANAGER_TEMPLATE_DIR}
EOF
                )

        if [ -n "${MANAGER_LOG_TYPE}" ] ; then
            config_manager=$(cat<<EOF
${config_manager}
logger = $(llng_logtype "$MANAGER_LOG_TYPE")
EOF
                            )
        fi

        if [ -n "${MANAGER_USER_LOG_TYPE}" ] ; then
            config_manager=$(cat<<EOF
${config_manager}
userLogger = $(llng_logtype "$MANAGER_USER_LOG_TYPE")
EOF
                            )
        fi

        if [ -n "${MANAGER_LOG_LEVEL}" ] ; then
            config_manager=$(cat<<EOF
${config_manager}
logLevel = ${MANAGER_LOG_LEVEL}
EOF
                            )
        fi
    fi
}

llng_configure_portal() {
    if var_true "${ENABLE_PORTAL}" ; then
        print_debug "Configuring Portal"
        nginx_site_enable portal
        update_template /etc/nginx/sites.available/portal.conf \
                                                            NGINX_LISTEN_PORT \
                                                            NGINX_LOG_ACCESS_FORMAT \
                                                            NGINX_LOG_ACCESS_LOCATION \
                                                            NGINX_LOG_ERROR_LOCATION \
                                                            PORTAL_HOSTNAME

        if var_false "${PORTAL_ENABLE_GITLAB_OAUTH}" ; then
            sed -i "/rewrite \^\/oauth2\/gitlab/d" /etc/nginx/sites.available/portal.conf
        fi

        create_logrotate nginx_lemonldap-portal_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-portal.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-portal_error "${NGINX_LOG_ACCESS_LOCATION}"/error-portal.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"

    ### Impersonation Theme Setup
        if var_true "${ENABLE_IMPERSONATION}" ; then
            sanity_var IMPERSONATE_HOSTNAME "Impersonation Hostname"
            sanity_var IMPERSONATE_THEME "Impersonation Theme"

            cat <<EOF | silent tee /etc/nginx/sites.available/impersonate.conf
server {
    listen ${NGINX_LISTEN_PORT};
    server_name ${IMPERSONATE_HOSTNAME};
    access_log ${NGINX_LOG_ACCESS_LOCATION}/access-impersonate.log ${NGINX_LOG_ACCESS_FORMAT,,};
    error_log ${NGINX_LOG_ACCESS_LOCATION}/error-impersonate.log;
    return 302 \$scheme://${IMPERSONATE_REDIRECT_HOSTNAME}/?skin=${IMPERSONATE_THEME};
}
EOF
        nginx_site_enable impersonate
        create_logrotate nginx_lemonldap-impersonate_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-impersonate.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-impersonate_error "${NGINX_LOG_ACCESS_LOCATION}"/error-impersonate.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"
        fi

        ### REST Remote Access
        if var_true "${PORTAL_ENABLE_REST}" ; then
            sed -i "/deny all;/i\ \ \    allow 127.0.0.1;" /etc/nginx/sites.available/portal.conf
            allowed_rest_portal=$(echo "${PORTAL_REST_ALLOWED_IPS}" | tr "," "\n" | uniq)
            for allowed_host in $allowed_rest_portal; do
                sed -i "/allow 127.0.0.1/a\ \ \      allow ${allowed_host};" /etc/nginx/sites.available/portal.conf
            done

            portal_rest_users=$(printenv | sort | grep -c '^PORTAL_REST_USER.*')
            for ((i = 01; i <= portal_rest_users; i++)); do
                transform_var file \
                                    PORTAL_REST_USER${i}
                                    PORTAL_REST_PASS${i}
                portal_rest_user=PORTAL_REST_USER${i}
                portal_rest_pass=PORTAL_REST_PASS${i}
                print_debug "Creating REST User: ${!portal_rest_user}"
                htpasswd -b -n ${!portal_rest_user:-$PORTAL_REST_USER} ${!portal_rest_pass:-$PORTAL_REST_PASS} >> "${PORTAL_REST_AUTH_FILE}"
            done

            if [ -f "${PORTAL_REST_AUTH_FILE}" ] ; then
                _rest_file_timestamp=$(date -r "${PORTAL_REST_AUTH_FILE}" +%Y%m%d%H%M.%S)
                _rest_file_tmp=$(mktemp)
                cp -R "${PORTAL_REST_AUTH_FILE}" "${_rest_file_tmp}"
                awk '!seen[$0]++' "${_rest_file_tmp}" > "${PORTAL_REST_AUTH_FILE}"
                touch -t "${_rest_file_timestamp}" "${PORTAL_REST_AUTH_FILE}"
                rm -rf "${_rest_file_tmp}"
                chown "${NGINX_USER}":"${NGINX_GROUP}" "${PORTAL_REST_AUTH_FILE}"
                chmod 600 "${PORTAL_REST_AUTH_FILE}"
                sed -i "/### REST/a\ \       auth_basic_user_file ${PORTAL_REST_AUTH_FILE};" /etc/nginx/sites.available/portal.conf
                sed -i "/location ~ ^\/index.psgi/a\ \           auth_basic \"Authentication Required\";" /etc/nginx/sites.available/portal.conf
            fi
        fi

        if var_true "${PORTAL_ENABLE_STATUS}" ; then
            allowed_status_portal=$(echo "${PORTAL_STATUS_ALLOWED_IPS}" | tr "," "\n" | uniq)
            sed -i "/status {/a\ \ \      allow 127.0.0.1;" /etc/nginx/sites.available/portal.conf
            for allowed_host in $allowed_status_portal; do
                sed -i "/allow status {/a\ \ \      allow ${allowed_host};" /etc/nginx/sites.available/portal.conf
            done
        fi

        config_portal=$(cat<<EOF
[portal]
languages = ${PORTAL_LANGUAGE}
staticPrefix = ${PORTAL_STATIC_PREFIX}
templateDir = ${PORTAL_TEMPLATE_DIR}
globalStorage = Apache::Session::File
globalStorageOptions = {
                            'Directory' => '${DATA_PATH}/sessions/',
                            'LockDirectory' => '${DATA_PATH}/lock/',
                        }
EOF
                        )

        if [ -n "${PORTAL_LOG_TYPE}" ] ; then
            config_portal=$(cat<<EOF
${config_portal}
logger = $(llng_logtype "$PORTAL_LOG_TYPE")
EOF
                            )
        fi

        if [ -n "${PORTAL_USER_LOG_TYPE}" ] ; then
            config_portal=$(cat<<EOF
${config_portal}
userLogger = $(llng_logtype "$PORTAL_USER_LOG_TYPE")
EOF
                            )
        fi

        if [ -n "${PORTAL_LOG_LEVEL}" ] ; then
            config_portal=$(cat<<EOF
${config_portal}
logLevel = ${PORTAL_LOG_LEVEL}
EOF
                            )
        fi
    fi
}

llng_configure_socket() {
    print_debug "Configuring Socket"
    if var_true "${HANDLER_SOCKET_TCP_ENABLE}" ; then
        HANDLER_SOCKET=${HANDLER_SOCKET:-"127.0.0.1:${HANDLER_SOCKET_TCP_PORT}"}
        sed -i "/fastcgi_param LLTYPE/ a \ \ \ \ \ \ \ fastcgi_param REMOTE_PORT $HANDLER_SOCKET_TCP_PORT;" /etc/nginx/sites.available/*.conf
        print_notice "Enabling Handler TCP expose functionality. Socket listens at port ${HANDLER_SOCKET_TCP_PORT}"
    else
        HANDLER_SOCKET=${HANDLER_SOCKET:-"unix:/var/run/llng-fastcgi-server/llng-fastcgi.sock|g"}
    fi
    update_template "/etc/nginx/sites.available/*.conf" HANDLER_SOCKET
}

llng_configure_test() {
    if var_true "${ENABLE_TEST}" ; then
        print_debug "Configuring Test Sites"
        nginx_site_enable test
        update_template /etc/nginx/sites.available/test.conf \
                                                            NGINX_LISTEN_PORT \
                                                            NGINX_LOG_ACCESS_FORMAT \
                                                            NGINX_LOG_ACCESS_LOCATION \
                                                            NGINX_LOG_ERROR_LOCATION \
                                                            TEST_HOSTNAME

        create_logrotate nginx_lemonldap-manager_test "${NGINX_LOG_ACCESS_LOCATION}"/access-test.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-manager_test "${NGINX_LOG_ACCESS_LOCATION}"/error-test.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"
    fi
}

llng_configure_webserver() {
    sed -i  \
                -e "\#application/zip#a\ \ \ \ application/x-font-ttf ttf;" \
                -e "\#application/zip#a\ \ \ \ font/opentype ott;" \
            /etc/nginx/mime.types
}

llng_setup_container_mode() {
    if [ "${MODE,,}" = "master" ] || [ "${MODE,,}" = "main" ] || [ "${MODE,,}" = "aio" ]; then
        print_debug "Container Mode: Master/AIO"
        print_debug "Creating MODE environment generated variables"
        ENABLE_API=TRUE
        ENABLE_HANDLER=TRUE
        ENABLE_MANAGER=TRUE
        ENABLE_PORTAL=TRUE
        ENABLE_TEST=TRUE
    else
        modes=$(echo "${MODE}" | tr "," "\n")
        for mode in $modes; do
            case "${mode,,}" in
                "api" )
                    print_debug "Enabling Container Mode for: API"
                    ENABLE_API=TRUE
                ;;
                "handler" )
                    print_debug "Enabling Container Mode for: Handler"
                    ENABLE_HANDLER=TRUE
                ;;
                "manager" )
                    print_debug "Enabling Container Mode for: Manager"
                    ENABLE_MANAGER=TRUE
                ;;
                "portal" )
                    print_debug "Enabling Container Mode for: Portal"
                    ENABLE_PORTAL=TRUE
                ;;
                "test" )
                    print_debug "Enabling Container Mode for: Test Sites"
                    ENABLE_TEST=TRUE
                ;;
                *)
                    print_error "Unknown 'MODE' environment variable - exitting.."
                    exit 1
                ;;
            esac
        done
    fi
}

write_config() {
    if [ "${SETUP_TYPE,,}" = "auto" ] ; then
        cat <<EOF | silent sudo -u llng tee "${CONFIG_PATH}"/lemonldap-ng.ini
; Custom Generated LemonLDAP:NG Config Overrides - Do not edit, instead set ENV Vars
; If you do want to edit this file and add your own custom, set the environment variable 'SETUP_TYPE=MANUAL' for next restart of container.
; Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[all]
${config_logging}

[configuration]
${config_configuration}

${config_portal}

${config_handler}

${config_manager}

EOF
    else
        print_warn "Manual Mode activated, you must make all changes to /etc/lemonldap-ng/lemonldap-ng.ini manually!"
    fi
}

### Logging Translation
llng_logtype() {
    case "${1,,}" in
            "console")
                echo "Lemonldap::NG::Common::Logger::Std"
            ;;
            "file" | "syslog" )
                echo "Lemonldap::NG::Common::Logger::Syslog"
            ;;
           *)
                echo "Lemonldap::NG::Common::Logger::Std"
            ;;
        esac
}

llng_translate_logLevel() {
    case "${1,,}" in
        "debug")
            echo "DEBUG"
        ;;
        "error")
            echo "ERROR"
        ;;
        "info")
            echo "INFO"
        ;;
        "notice")
            echo "ERROR"
        ;;
        "warn")
            echo "WARN"
        ;;
        *)
            echo "INFO"
        ;;
    esac
}
zo